#%RAML 0.8
---
title: "DCAS API"
version: v1
schemas:
  - user: |
      {  "$schema": "http://json-schema.org/draft-03/schema",
         "type": "object",
         "description": "A single User",
         "properties": {
           "id":  { "type": "string", "required": true },
           "name":  { "type": "string", "required": true },
           "age":  { "type": "integer" }
         }
      }
  - users: |
      {  "$schema": "http://json-schema.org/draft-03/schema",
         "type": "object",
         "description": "A collection of Users",
         "properties": {
           "users":  {
              "type": "array",
              "items": { "$ref": "user" }
           }
         }
      }
  - error: |
      {  "$schema": "http://json-schema.org/draft-03/schema",
         "type": "object",
         "description": "An error message",
         "properties": {
           "code":  { "type": "string", "required": true },
           "description":  { "type": "string", "required": true }
         }
      }
resourceTypes:
  - base:
      get?:
        responses: &standardResponses
          200:
            description: OK
          404:
            description: Not Found
            body:
              application/json:
                schema: "error"
          400:
            description: Bad Request
            body:
              application/json:
                schema: "error"
      put?:
        responses: *standardResponses
      post?:
          responses:
            201:
              description: Created
            400:
              description: Bad Request
              body:
                application/json:
                  schema: "error"
      delete?:
        responses: *standardResponses
  - collection:
      type: base
      get:
  - typedCollection:
      type: collection
      get:
        responses:
          200:
            body:
              application/json:
                schema: <<collectionSchema>>
      post:
        body:
          application/json:
            schema: <<schema>>
        responses:
          201:
  - member:
      type: base
      get:
      put:
      delete:
  - typedMember:
      type: member
      get:
        responses:
          200:
            body:
              application/json:
                schema: <<schema>>
      put:
        body:
          application/json:
            schema: <<schema>>
        responses:
          200:
      delete:
traits:
  - paged:
      displayName: paged
      queryParameters:
        start:
          displayName: start
          description: The first page to return
          type: integer
        pages:
          displayName: pages
          description: The number of pages to return
          type: integer
/user: &users
  type: { typedCollection: { schema: user, collectionSchema: users } }
  get:
  delete:
  /{userId}:
    type: { typedMember: { schema: user } }
